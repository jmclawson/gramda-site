---
title: "Unit 3 Exam Review"
---

In class on November 14, students identified which parts of unit 3 they wanted to go over more. We spent the class period focusing on these details, as shown in the resulting file below.

## Import Data

In class, we found a data set online of GDP for many different countries, and we thought at first we might want to work with it. Generally, we'd prefer to import local data, so that we don't hit a web server every time we render a document. (That's kind of rude!) But for the sake of brevity, we're downloading directly from a website here:

```{r}
#| message: false

library(tidyverse)

gdp <- read_csv("https://data.un.org/_Docs/SYB/CSV/SYB65_230_202209_GDP%20and%20GDP%20Per%20Capita.csv")
```

Check it out by typing the name:

```{r}
gdp
```

We imported it correctly, but the data is not very tidy. We *could* clean the data to make it easier to work with, but that's outside the scope of our unit exam. So I'm going to abandon this data and create a new data set to work from.

For this exam, I'm not going to ask you to create a data frame or tibble, but doing so pretty straightforward with either the `data.frame()` function or the `tibble()` function:

```{r}
student <- c("Alva", "Bob", "Charlie")
test1  <- c(96, 97, 98)
test2 <- c(78, 65, 80)
test3 <- c(12, 4, 8)

gradebook <- tibble(student, test1, test2, test3)

gradebook
```

Compared to the `gdp` data, the new `gradebook` data set is much tidier and easier to work with.

## Reshape with `pivot_longer()`

Let's see what it looks like to reshape it, pivoting it longer. We put `-student` inside the parentheses because these are in effect the "hinge" of our pivoting. You always need one or more columns to serve as the hinge when you're pivoting longer:

```{r}
gradebook |> 
  pivot_longer(-student)
```

## Adding a column with `mutate()`

We'd use `pivot_longer()` in order to find some summary statistic for each student. Without pivoting, here's how we'd find the average for each student:

```{r}
gradebook |> 
  mutate(final_grade = (test1 + test2 + test3) / 3)
```

That's not awful, but most grade books have many more columns. Pivoting lets us be a little smarter, avoiding having to list each column by name. After pivoting, we group by student and then add a new column:

```{r}
gradebook |> 
  pivot_longer(-student) |> 
  group_by(student) |> 
  mutate(final_grade = mean(value))
```

## Simplifying data with `summarize()`

If we only wanted that average grade, we could have instead used `summarize()`:

```{r}
gradebook |> 
  pivot_longer(-student) |> 
  group_by(student) |> 
  summarize(final_grade = mean(value))
```

## Reshape with `pivot_wider()`

But using `mutate()` makes it easy to reshape things back to the wider format at the end:

```{r}
gradebook_final <- 
  gradebook |> 
  pivot_longer(-student) |> 
  group_by(student) |> 
  mutate(final_grade = mean(value)) |> 
  pivot_wider()

gradebook_final
```

## Reordering rows with `arrange()`

While we're at it, we can also `arrange()` the data by the new column we created, showing the highest grade on top:

```{r}
gradebook_final |> 
  arrange(desc(final_grade))
```

## Limiting certain rows with `filter()`

Or we can `filter()` to show only the students who earned a passing grade in the class.

```{r}
gradebook_final |>
  filter(final_grade >= 60)
```

## Combining data sets with `left_join()`

Sometimes we might want to mash two data sets together. For instance, maybe we've just downloaded the results from test4 and test5 on Canvas.

```{r}
new_grades <- tibble(student = c("Bob", "Alva", "Mary", "Charlie"),
                     test4 = c(16, 27, 8, 98),
                     test5 = c(100, 100, 100, 100))

new_grades

```

For these tests, you might have noted that Mary somehow snuck in. Keep an eye on her to see what happens.

Since our `gradebook` and `new_grades` data sets share a column with a matching name, we can use `left_join()` to stick the new tests onto the old ones.

```{r}
left_join(gradebook, new_grades)
```

We get a message saying `Joining, by = "student"` to make explicit that it's matching the two data sets by a column with a shared name. And Mary has been ignored! This is because `left_join()` prioritizes the data in the left (or first mentioned) data set and it ignores any `student` values not found in that left data set. If we swap the data sets inside the parentheses, Mary will now show up, and the column order will change:

```{r}
left_join(new_grades, gradebook)
```

The column and row order always prioritizes the leftmost (or first) set of data mentioned in the `left_join()` function. And since Mary missed tests 1-3, she has `NA` values for each of these.

I'm not going to ask you to use it on the exam, but it might be nice to know about `full_join()` while you're here. It prioritizes the first data for order, but it also makes sure that no data gets cut.

```{r}
full_join(gradebook, new_grades)
```

## Visualizing with `ggplot`

With `ggplot`, don't forget the important elements. First, we need a data set like `gradebook`. Next, we need a `ggplot()` function, which typically has an `aes()` function inside it. The `aes()` function is where we map our X-axis and Y-axis to certain columns in our data set. Lastly, we need a `geom_something()` function, where "*something*" points to a particular kind of visualization. Remember, too, that we need to use a plus sign to combine the layers!

```{r}
gradebook |>
  ggplot(mapping = aes(y = student, x = test3)) +
  geom_col()
```

## Overwriting existing values with `mutate()`

Although valuable for adding new columns, `mutate()` can also overwrite existing values.

For example, consider those `test3` grades. They're surprisingly small! It turns out this test was graded out of 13 points, instead of 100. If we want to scale everything to a common scale of percentage, we can use `mutate()` to change existing columns instead of creating new columns.

```{r}
gradebook |>
  mutate(test1 = test1/100,
         test2 = test2/100,
         test3 = test3/13)
```

It's kind of messy, but at least now each of the columns are in the same scale. From here, it's not hard to average a more-accurate `final_grade` for each student, rounded to two digits:

```{r}
final_gradebook <- 
  gradebook |>
  mutate(test1 = test1/100,
         test2 = test2/100,
         test3 = test3/13) |> 
  pivot_longer(-student) |> 
  group_by(student) |> 
  mutate(final_grade = mean(value) |> round(2)) |> 
  pivot_wider()

final_gradebook
```

## Exporting with `write_csv()`

We imported by reading, and we're exporting by writing:

```{r}
write_csv(final_gradebook, "final_gradebook.csv")
```
